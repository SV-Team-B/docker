version: "3"

services:
  prometheus:
    image: prom/prometheus:v2.14.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prom_store:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    networks:
      - app-tier
    depends_on:
      - backend

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - 9100:9100
    networks:
      - app-tier

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-tier

  grafana:
    image: grafana/grafana:8.5.5
    ports:
      - 3060:3000
    networks:
      - app-tier
    depends_on:
      - backend
      - prometheus
  ai:
    build:
      context: ./AI
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    networks:
      - app-tier

  backend: &python
    container_name: backend
    build:
      context: ./backend
    command: sh -c "python manage.py migrate && gunicorn --bind 0:8000 config.wsgi:application"
    links:
      - redis:rd
      - rabbitmq:rb
      - ai:ai
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
      - ./backend/static:/backend/static
    expose:
      - 8000
    networks:
      - app-tier
    depends_on:
      - redis
      - rabbitmq
      - celery

  celery:
    <<: *python
    container_name: celery
    command: "celery -A flower worker --loglevel=INFO"
    ports: []
    depends_on:
      - rabbitmq

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/dist
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true

  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - 80
      - 443
    volumes:
      - build_folder:/var/www/frontend
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./backend/static:/backend/static
    depends_on:
      - frontend
      - backend
    networks:
      - app-tier

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - app-tier

  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
    networks:
      - app-tier

  certbot: #certbot 컨테이너 추가
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt #nginx컨테이너에 certbot컨테이너 연결
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-tier:
    driver: bridge

volumes:
  build_folder: null
  prom_store:
    external: true

